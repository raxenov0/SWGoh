# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import threading

import res_rc
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QFileDialog, QColorDialog, QMainWindow, QLineEdit
from PyQt5.QtGui import QColor
from PyQt5.QtCore import QThread, pyqtSignal
import time
from pysondb import db


class MyThread(QThread):
    def __init__(self, sleep):
        super().__init__()
        self.sleepBar = sleep
        self.exit_event = threading.Event()
        self.working = True

    change_value = pyqtSignal(int)

    def run(self):
        cnt = 0
        startTime = time.monotonic()
        while cnt < 1000 and self.working:
            if self.sleepBar * cnt < time.monotonic() - startTime:
                cnt += 1
                self.change_value.emit(cnt)
                if self.exit_event.is_set():
                    break
            time.sleep(0.1)

    def stop(self):
        self.working = False
        self.exit_event.set()


class Ui_Dialog(QDialog):
    @staticmethod
    def getNumberPreset():
        a = db.getDb("db_config.json")
        req = a.getByQuery({"type": "presets"})
        presets = []
        if req:
            presets = req[0]["data"]

        if presets:
            active = next((item for item in presets if item["active"]), None)
            if active:
                return {"active": presets.index(active) + 1, "count": len(presets)}
        return {"active": 1, "count": 1}

    @staticmethod
    def getItems(num: int):
        a = db.getDb("db_config.json")
        req = a.getByQuery({"type": "presets"})
        presets = []
        if req:
            presets = req[0]["data"]

        items = []
        if presets:
            if 0 <= num - 1 < len(presets):
                preset = presets[num - 1]
                data = preset["data"]
                items = [item["name"] for item in data if item["type"] == "unit"]

        return items

    @staticmethod
    def getBoolExt():
        a = db.getDb("db_config.json")
        req = a.getByQuery({"type": "extension"})
        ext = ""
        if req:
            ext = req[0]["data"]

        if ext == "html":
            return True
        else:
            return False

    def __init__(self):
        super().__init__()
        data = self.getNumberPreset()
        self.numPreset = data["active"]
        self.numActivePreset = data["active"]
        self.countPresets = data["count"]

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(587, 455)
        Dialog.setMinimumSize(QtCore.QSize(587, 455))
        Dialog.setMaximumSize(QtCore.QSize(587, 455))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/resources/image/icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setStyleSheet("#centralwidget {\n"
                             "    background-color: rgb(240,255,255);\n"
                             "}")
        self.centralwidget = QtWidgets.QWidget(Dialog)
        self.centralwidget.setGeometry(QtCore.QRect(0, 0, 587, 455))
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(20, 390, 125, 55))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("QPushButton {\n"
                                        "background: autoFill;\n"
                                        "background-color: rgb(1, 74, 88);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 21px;\n"
                                        "}\n"
                                        "QPushButton::pressed {\n"
                                        "    background-color: rgb(97, 164, 173);\n"
                                        "}\n"
                                        "QPushButton:disabled {\n"
                                        "    background-color: rgba(1, 74, 88, 150);\n"
                                        "}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(155, 390, 125, 55))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("QPushButton {\n"
                                        "background: autoFill;\n"
                                        "background-color: rgb(1, 74, 88);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 21px;\n"
                                        "}\n"
                                        "QPushButton::pressed {\n"
                                        "    background-color: rgb(97, 164, 173);\n"
                                        "}\n"
                                        "QPushButton:disabled {\n"
                                        "    background-color: rgba(1, 74, 88, 150);\n"
                                        "}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(20, 85, 551, 201))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.listWidget.setFont(font)
        self.listWidget.setStyleSheet("QScrollBar:vertical {\n"
                                      "    background: white;\n"
                                      "    width: 12px;               \n"
                                      "    margin: 0px 0px 0px 0px;\n"
                                      "}\n"
                                      "QScrollBar::handle:vertical {\n"
                                      "    background: rgb(1, 74, 88);\n"
                                      "    min-height: 0px;\n"
                                      "}\n"
                                      "QScrollBar::add-line:vertical {\n"
                                      "    background: rgb(1, 74, 88);\n"
                                      "    height: 0px;\n"
                                      "    subcontrol-position: bottom;\n"
                                      "    subcontrol-origin: margin;\n"
                                      "}\n"
                                      "QScrollBar::sub-line:vertical {\n"
                                      "    background: rgb(1, 74, 88);\n"
                                      "    height: 0 px;\n"
                                      "    subcontrol-position: top;\n"
                                      "    subcontrol-origin: margin;\n"
                                      "}\n"
                                      "QListWidget::item:selected {\n"
                                      "    background: #cce7ff;\n"
                                      "    color: black;\n"
                                      "}")
        self.listWidget.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.listWidget.setObjectName("listWidget")
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_2.setGeometry(QtCore.QRect(20, 85, 551, 250))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.listWidget_2.setFont(font)
        self.listWidget_2.setStyleSheet("QScrollBar:vertical {              \n"
                                        "    background: white;\n"
                                        "    width: 12px;               \n"
                                        "    margin: 0px 0px 0px 0px;\n"
                                        "}\n"
                                        "QScrollBar::handle:vertical {\n"
                                        "    background: rgb(1, 74, 88);\n"
                                        "    min-height: 0px;\n"
                                        "}\n"
                                        "QScrollBar::add-line:vertical {\n"
                                        "    background: rgb(1, 74, 88);\n"
                                        "    height: 0px;\n"
                                        "    subcontrol-position: bottom;\n"
                                        "    subcontrol-origin: margin;\n"
                                        "}\n"
                                        "QScrollBar::sub-line:vertical {\n"
                                        "    background: rgb(1, 74, 88);\n"
                                        "    height: 0 px;\n"
                                        "    subcontrol-position: top;\n"
                                        "    subcontrol-origin: margin;\n"
                                        "}\n"
                                        "QListWidget::item:selected {\n"
                                        # "    background: rgba(255, 255, 255, 10);\n"
                                        "    color: black;\n"
                                        "}")
        self.listWidget_2.setDragDropMode(QtWidgets.QAbstractItemView.NoDragDrop)
        self.listWidget_2.setObjectName("listWidget_2")
        self.listWidget_2.setHidden(True)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(312, 305, 90, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet("QPushButton {\n"
                                        "background: autoFill;\n"
                                        "background-color: rgb(1, 74, 88);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 10px;\n"
                                        "}\n"
                                        "QPushButton::pressed {\n"
                                        "    background-color: rgb(97, 164, 173);\n"
                                        "}")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setDisabled(True)
        self.pushButton_6.setGeometry(QtCore.QRect(406, 305, 90, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setStyleSheet("QPushButton {\n"
                                        "background: autoFill;\n"
                                        "background-color: rgb(1, 74, 88);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 10px;\n"
                                        "}\n"
                                        "QPushButton::pressed {\n"
                                        "    background-color: rgb(97, 164, 173);\n"
                                        "}\n"
                                        "QPushButton:disabled {\n"
                                        "background-color: rgba(1, 74, 88, 150);\n"
                                        "}")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setDisabled(True)
        self.pushButton_7.setGeometry(QtCore.QRect(500, 305, 35, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("QPushButton {\n"
                                        "background: autoFill;\n"
                                        "background-color: rgb(1, 74, 88);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 10px;\n"
                                        "}\n"
                                        "QPushButton::pressed {\n"
                                        "    background-color: rgb(97, 164, 173);\n"
                                        "}\n"
                                        "QPushButton:disabled {\n"
                                        "background-color: rgba(1, 74, 88, 150);\n"
                                        "}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setDisabled(True)
        self.pushButton_8.setGeometry(QtCore.QRect(536, 305, 35, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setStyleSheet("QPushButton {\n"
                                        "background: autoFill;\n"
                                        "background-color: rgb(1, 74, 88);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 10px;\n"
                                        "}\n"
                                        "QPushButton::pressed {\n"
                                        "    background-color: rgb(97, 164, 173);\n"
                                        "}\n"
                                        "QPushButton:disabled {\n"
                                        "background-color: rgba(1, 74, 88, 150);\n"
                                        "}")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(422, 375, 20, 46))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setStyleSheet("QPushButton {\n"
                                        "background-color: transparent;\n"
                                        "color: rgb(1, 74, 88);\n"
                                        "}\n"
                                        "QPushButton::pressed {\n"
                                        "    color: rgb(97, 164, 173);\n"
                                        "}\n"
                                        "QPushButton:disabled {\n"
                                        "    color: rgba(1, 74, 88, 150);\n"
                                        "}")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(551, 375, 20, 46))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setStyleSheet("QPushButton {\n"
                                         "background-color: transparent;\n"
                                         "color: rgb(1, 74, 88);\n"
                                         "}\n"
                                         "QPushButton::pressed {\n"
                                         "    color: rgb(97, 164, 173);\n"
                                         "}\n"
                                         "QPushButton:disabled {\n"
                                         "    color: rgba(1, 74, 88, 150);\n"
                                         "}")
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(422, 418, 70, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setStyleSheet("QPushButton {\n"
                                         "background: autoFill;\n"
                                         "background-color: rgb(255, 255, 255);\n"
                                         "color: rgb(1, 74, 88);\n"
                                         "border-style: outset;\n"
                                         "border-width: 1px;\n"
                                         "border-radius: 5px;\n"
                                         "}\n"
                                         "QPushButton::pressed {\n"
                                         "    background-color: rgb(227, 227, 227);\n"
                                         "}\n"
                                         "QPushButton:disabled {\n"
                                         "    background-color: rgb(227, 227, 227);\n"
                                         "}")
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(500, 418, 70, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setStyleSheet("QPushButton {\n"
                                         "background: autoFill;\n"
                                         "background-color: rgb(255, 255, 255);\n"
                                         "color: rgb(1, 74, 88);\n"
                                         "border-style: outset;\n"
                                         "border-width: 1px;\n"
                                         "border-radius: 5px;\n"
                                         "}\n"
                                         "QPushButton::pressed {\n"
                                         "    background-color: rgb(227, 227, 227);\n"
                                         "}\n"
                                         "QPushButton:disabled {\n"
                                         "    background-color: rgb(227, 227, 227);\n"
                                         "}")
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QtCore.QRect(20, 9, 270, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setStyleSheet("QPushButton {\n"
                                         "background: autoFill;\n"
                                         "background-color: rgb(255, 255, 255);\n"
                                         "color: rgb(1, 74, 88);\n"
                                         "border-style: outset;\n"
                                         "border-width: 1px;\n"
                                         "border-radius: 5px;\n"
                                         "}\n"
                                         "QPushButton::pressed {\n"
                                         "    background-color: rgb(227, 227, 227);\n"
                                         "}\n"
                                         "QPushButton:disabled {\n"
                                         "    background-color: rgb(227, 227, 227);\n"
                                         "}")
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_13.setDisabled(True)
        self.pushButton_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_14.setGeometry(QtCore.QRect(301, 10, 270, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setStyleSheet("QPushButton {\n"
                                         "background: autoFill;\n"
                                         "background-color: rgb(255, 255, 255);\n"
                                         "color: rgb(1, 74, 88);\n"
                                         "border-style: outset;\n"
                                         "border-width: 1px;\n"
                                         "border-radius: 5px;\n"
                                         "}\n"
                                         "QPushButton::pressed {\n"
                                         "    background-color: rgb(227, 227, 227);\n"
                                         "}\n"
                                         "QPushButton:disabled {\n"
                                         "    background-color: rgb(227, 227, 227);\n"
                                         "}")
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_15.setGeometry(QtCore.QRect(20, 390, 125, 55))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setStyleSheet("QPushButton {\n"
                                         "background: autoFill;\n"
                                         "background-color: rgb(1, 74, 88);\n"
                                         "color: rgb(255, 255, 255);\n"
                                         "border-style: outset;\n"
                                         "border-width: 2px;\n"
                                         "border-radius: 21px;\n"
                                         "}\n"
                                         "QPushButton::pressed {\n"
                                         "    background-color: rgb(97, 164, 173);\n"
                                         "}\n"
                                         "QPushButton:disabled {\n"
                                         "    background-color: rgba(1, 74, 88, 150);\n"
                                         "}")
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_15.setHidden(True)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 45, 471, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label.setFont(font)
        self.label.setStyleSheet("background: transparent;\n"
                                 "font: 75 12pt \"Arial\";\n"
                                 "color: rgb(0, 59, 70);")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 347, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background: transparent;\n"
                                   "font: 75 12pt \"Arial\";\n"
                                   "color: rgb(0, 59, 70);")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(295, 347, 51, 31))
        self.label_3.setStyleSheet("background: transparent;\n"
                                   "font: 75 12pt \"Arial\";\n"
                                   "color: rgb(0, 59, 70);")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(413, 347, 41, 31))
        self.label_4.setStyleSheet("background: transparent;\n"
                                   "font: 75 12pt \"Arial\";\n"
                                   "color: rgb(0, 59, 70);")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(440, 384, 118, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background: transparent;\n"
                                   "color: rgb(0, 59, 70);")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(20, 45, 481, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("background: transparent;\n"
                                   "font: 75 12pt \"Arial\";\n"
                                   "color: rgb(0, 59, 70);")
        self.label_6.setObjectName("label_6")
        self.label_6.setHidden(True)
        self.lineEdit = QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(20, 305, 285, 30))
        self.lineEdit.setStyleSheet("border-style: outset;\n"
                                    "border-width: 2px;\n"
                                    "border-radius: 8px;\n"
                                    "border-color: rgb(0, 0, 0);\n"
                                    "background: transparent;\n"
                                    "font-size: 18px;")
        self.lineEdit.setClearButtonEnabled(True)
        self.lineEdit.setObjectName("lineEdit")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(350, 338, 57, 50))
        self.checkBox.setStyleSheet("QCheckBox::indicator {\n"
                                    "    width: 50px;\n"
                                    "    height: 50px;\n"
                                    "}\n"
                                    "\n"
                                    "QCheckBox::indicator::checked {\n"
                                    "    image: url(:/resources/image/switch-on.png);\n"
                                    "}\n"
                                    "\n"
                                    "QCheckBox::indicator::unchecked {\n"
                                    "    image: url(:/resources/image/switch-off.png);\n"
                                    "}")
        self.checkBox.setText("")
        self.checkBox.setObjectName("checkBox")

        self.retranslateUi(Dialog)
        self.setPreset()
        self.checkActions()
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Обновление конфигурации"))
        self.label.setText(_translate("Dialog", "Данные отображаются по следующим персонажам:"))
        self.label_2.setText(_translate("Dialog", "Формат сохранения данных:"))
        self.label_3.setText(_translate("Dialog", "excel"))
        self.label_4.setText(_translate("Dialog", "html"))
        self.label_6.setText(_translate("Dialog", "Данные оформляются согласно следующим цветам:"))
        self.lineEdit.setPlaceholderText(_translate("Dialog", "APIИмя:ПользовательскоеИмя"))
        self.pushButton_5.setText(_translate("Dialog", "Добавить"))
        self.pushButton_6.setText(_translate("Dialog", "Удалить"))
        self.pushButton_7.setText(_translate("Dialog", "▲"))
        self.pushButton_8.setText(_translate("Dialog", "▼"))
        self.pushButton_3.setText(_translate("Dialog", "Выбрать\nвкладку"))
        self.pushButton_4.setText(_translate("Dialog", "Принять\nизменения"))
        self.pushButton_9.setText(_translate("Dialog", "❮"))
        self.pushButton_10.setText(_translate("Dialog", "❯"))
        self.pushButton_11.setText(_translate("Dialog", "Удалить"))
        self.pushButton_12.setText(_translate("Dialog", "Создать"))
        self.pushButton_13.setText(_translate("Dialog", "Персонажи"))
        self.pushButton_14.setText(_translate("Dialog", "Цвета"))
        self.pushButton_15.setText(_translate("Dialog", "Принять\nизменения"))

    def setPreset(self):
        self.changePreset()
        self.checkBox.setChecked(self.getBoolExt())

    def checkActions(self):
        self.pushButton_3.clicked.connect(self.setActivePreset)
        self.pushButton_4.clicked.connect(self.saveConfig)
        self.pushButton_5.clicked.connect(self.addItemInList)
        self.pushButton_6.clicked.connect(self.removeItemFromList)
        self.pushButton_7.clicked.connect(self.changeRowSelectItemUp)
        self.pushButton_8.clicked.connect(self.changeRowSelectItemDown)
        self.pushButton_9.clicked.connect(self.changePresetPrev)
        self.pushButton_10.clicked.connect(self.changePresetNext)
        self.pushButton_11.clicked.connect(self.deletePreset)
        self.pushButton_12.clicked.connect(self.createPreset)
        self.pushButton_13.clicked.connect(self.hideColorsBlock)
        self.pushButton_14.clicked.connect(self.hidePresetBlock)
        self.pushButton_15.clicked.connect(self.saveColorsAndExt)
        self.lineEdit.textChanged.connect(self.removeSelectList)
        self.listWidget.currentRowChanged.connect(self.setVisibleMenuButtons)
        self.listWidget_2.itemDoubleClicked.connect(self.setColorItem)
        self.checkBox.clicked.connect(self.activateSaveButton)

    def saveConfig(self):
        a = db.getDb("db_config.json")
        req = a.getByQuery({"type": "colors"})
        colors = []
        if req:
            colors = req[0]["data"]

        req = a.getByQuery({"type": "presets"})
        presets = []
        if req:
            presets = req[0]["data"]

        a.deleteAll()

        data = []

        if self.checkBox.isChecked():
            ext = "html"
        else:
            ext = "excel"

        data.append({"data": ext, "type": "extension"})

        items = []
        for i in range(self.listWidget.count()):
            items.append({"name": self.listWidget.item(i).text(), "type": "unit"})

        if 0 <= self.numPreset - 1 < len(presets):
            preset = presets[self.numPreset - 1]
            preset["data"] = items
        else:
            presets.append(({"data": items, "active": True}))

        data.append({"data": presets, "type": "presets"})
        data.append({"data": colors, "type": "colors"})
        a.addMany(data)

        self.pushButton_4.setDisabled(True)
        self.removeSelectList()
        if not self.pushButton_3.isEnabled():
            self.close()

    def setActivePreset(self):
        a = db.getDb("db_config.json")
        data = a.getAll()
        presets = next((item for item in data if item["type"] == "presets"))["data"]
        preset = presets[self.numActivePreset - 1]
        preset["active"] = False
        preset = presets[self.numPreset - 1]
        preset["active"] = True
        self.numActivePreset = self.numPreset
        a.deleteAll()
        a.addMany(data)
        self.pushButton_3.setDisabled(True)
        if not self.pushButton_4.isEnabled():
            self.close()

    def saveColorsAndExt(self):
        a = db.getDb("db_config.json")
        req = a.getByQuery({"type": "presets"})
        presets = []
        if req:
            presets = req[0]["data"]

        data = []

        if self.checkBox.isChecked():
            ext = "html"
        else:
            ext = "excel"

        data.append({"data": ext, "type": "extension"})
        data.append({"data": presets, "type": "presets"})

        req = a.getByQuery({"type": "colors"})
        colors = req[0]["data"]

        items = []
        for i in range(self.listWidget_2.count()):
            name = colors[i]["name"]
            code = self.listWidget_2.item(i).background().color().name()
            value = self.listWidget_2.item(i).text()
            items.append({"name": name, "hex": code, "value": value, "type": "color"})

        data.append({"data": items, "type": "colors"})

        a.deleteAll()
        a.addMany(data)
        self.pushButton_15.setDisabled(True)

    def removeSelectList(self):
        self.listWidget.setCurrentRow(-1)

    def addItemInList(self):
        item = self.lineEdit.text()
        if item:
            self.listWidget.addItem(item)
            self.listWidget.scrollToItem(self.listWidget.item(self.listWidget.count() - 1))
            self.lineEdit.setText('')
        self.removeSelectList()

    def setDisabledMenuButtons(self, flag: bool):
        self.pushButton_6.setDisabled(flag)
        self.pushButton_7.setDisabled(flag)
        self.pushButton_8.setDisabled(flag)

    def activateSaveButton(self):
        self.pushButton_4.setDisabled(False)
        self.pushButton_15.setDisabled(False)

    def setVisibleMenuButtons(self):
        row = self.listWidget.currentRow()
        if row != -1:
            self.setDisabledMenuButtons(False)
            if row == 0:
                self.pushButton_7.setDisabled(True)
            if row == self.listWidget.count() - 1:
                self.pushButton_8.setDisabled(True)
        else:
            self.setDisabledMenuButtons(True)

    def removeItemFromList(self):
        item = self.listWidget.currentRow()
        if item != -1:
            self.listWidget.takeItem(item)
            self.removeSelectList()

    def changeRowSelectItemUp(self):
        row = self.listWidget.currentRow()
        item = self.listWidget.currentItem()
        self.listWidget.takeItem(row)
        self.listWidget.insertItem(row - 1, item)
        self.listWidget.setCurrentRow(row - 1)

    def changeRowSelectItemDown(self):
        row = self.listWidget.currentRow()
        item = self.listWidget.currentItem()
        self.listWidget.takeItem(row)
        self.listWidget.insertItem(row + 1, item)
        self.listWidget.setCurrentRow(row + 1)

    def changePresetPrev(self):
        self.numPreset -= 1
        self.changePreset()

    def changePresetNext(self):
        self.numPreset += 1
        self.changePreset()

    def changePreset(self):
        self.pushButton_4.setDisabled(False)
        self.pushButton_9.setDisabled(False)
        self.pushButton_10.setDisabled(False)
        if self.numPreset == 1:
            self.pushButton_9.setDisabled(True)
        if self.numPreset == self.countPresets:
            self.pushButton_10.setDisabled(True)

        if self.numPreset == self.numActivePreset:
            self.pushButton_3.setDisabled(True)
        else:
            self.pushButton_3.setDisabled(False)

        if self.countPresets == 1:
            self.pushButton_11.setDisabled(True)
        else:
            self.pushButton_11.setDisabled(False)

        self.label_5.setText("Вкладка " + str(self.numPreset))
        self.listWidget.clear()

        items = self.getItems(self.numPreset)
        for name in items:
            item = QtWidgets.QListWidgetItem()
            item.setFlags(
                QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
            item.setText(name)
            self.listWidget.addItem(item)

    def deletePreset(self):
        a = db.getDb("db_config.json")
        data = a.getAll()
        presets = next((item for item in data if item["type"] == "presets"))["data"]
        preset = presets.pop(self.numPreset - 1)
        flag = preset["active"]
        a.deleteAll()
        a.addMany(data)

        self.countPresets -= 1
        if self.numPreset != 1:
            self.numPreset -= 1

        if flag:
            self.numActivePreset = self.numPreset
            self.setActivePreset()
        else:
            self.numActivePreset = self.getNumberPreset()["active"]

        self.changePreset()

    def createPreset(self):
        a = db.getDb("db_config.json")
        data = a.getAll()
        presets = next((item for item in data if item["type"] == "presets"))["data"]
        presets.append({"data": [], "active": False})
        a.deleteAll()
        a.addMany(data)

        self.countPresets += 1
        self.numPreset = self.countPresets
        self.changePreset()

    def setHiddenMenuBlocks(self, flag: bool):
        self.pushButton_4.setDisabled(False)
        self.pushButton_15.setDisabled(False)

        self.pushButton_13.setDisabled(not flag)
        self.pushButton_14.setDisabled(flag)

        self.label.setHidden(flag)
        self.listWidget.setHidden(flag)
        self.lineEdit.setHidden(flag)
        self.pushButton_5.setHidden(flag)
        self.pushButton_6.setHidden(flag)
        self.pushButton_7.setHidden(flag)
        self.pushButton_8.setHidden(flag)
        self.pushButton_3.setHidden(flag)
        self.pushButton_4.setHidden(flag)
        self.pushButton_9.setHidden(flag)
        self.pushButton_10.setHidden(flag)
        self.pushButton_11.setHidden(flag)
        self.pushButton_12.setHidden(flag)
        self.label_5.setHidden(flag)

        self.label_6.setHidden(not flag)
        self.listWidget_2.setHidden(not flag)
        self.pushButton_15.setHidden(not flag)

    def hidePresetBlock(self):
        self.setHiddenMenuBlocks(True)

        self.listWidget_2.clear()

        a = db.getDb("db_config.json")
        req = a.getByQuery({"type": "colors"})

        if req:
            colors = req[0]["data"]

            gen = (item for item in colors if item["type"] == "color")
            for color in gen:
                item = QtWidgets.QListWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                item.setBackground(QColor(color["hex"]))
                item.setText(color["value"])
                self.listWidget_2.addItem(item)

    def hideColorsBlock(self):
        self.setHiddenMenuBlocks(False)

    def setColorItem(self):
        item = self.listWidget_2.currentItem()
        color = QColorDialog.getColor(title="Выбрать цвет")
        if color.isValid():
            item.setBackground(color)


class PopupException(QDialog):
    def __init__(self, labelText, error=True, id=None):
        super().__init__()
        self.flagError = error
        self.text = labelText
        self.id = id

    def setupUi(self, Form):
        Form.setObjectName("Error")
        Form.resize(570, 140)
        Form.setMinimumSize(QtCore.QSize(570, 140))
        Form.setMaximumSize(QtCore.QSize(570, 140))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/resources/image/icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        Form.setStyleSheet("background-color: rgb(240,255,255);")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(415, 90, 130, 30))
        self.pushButton.setStyleSheet("background: autoFill;\n"
                                      "background-color: rgb(1, 74, 88);\n"
                                      "color: rgb(255, 255, 255);\n"
                                      "font: 75 12pt \"Arial\";\n"
                                      "border-style: outset;\n"
                                      "border-radius: 15px;")
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(0, 30, 570, 41))
        self.label.setStyleSheet("font: 75 14pt \"Arial\";\n"
                                 "background: transparent;\n"
                                 "color: rgb(1, 74, 88);")
        self.label.setObjectName("label")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        if self.flagError:
            Form.setWindowTitle(_translate("Form", "Ошибка"))
        else:
            Form.setWindowTitle(_translate("Form", "Успешно"))
        self.pushButton.setText(_translate("Form", "Принято"))
        if self.id:
            self.label.setText(_translate("Form", self.text + self.id))
        else:
            self.label.setText(_translate("Form", self.text))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.pushButton.clicked.connect(self.close)


class Ui_MainWindow(QMainWindow):
    class MyLineEdit(QLineEdit):
        def __init__(self, parent=None):
            QLineEdit.__init__(self, parent=parent)
            self.setPlaceholderText('000-000-000')
            self.setMaxLength(11)

        def setCursorPos(self):
            count = 0
            for i in self.displayText()[::-1]:
                if i in '123456789':
                    break
                count += 1

            if count == 4 or count == 8:
                count -= 1

            if count:
                self.setCursorPosition(len(self.displayText()) - count)
            else:
                self.setCursorPosition(0)

        def focusInEvent(self, event):
            if self.text() == "":
                self.setInputMask('999-999-999')
                self.setText('000-000-000')
            self.setCursorPos()

        def focusOutEvent(self, event):
            if self.text().replace('0', '') == "--":
                self.setInputMask('')
                self.setText('')

        def mousePressEvent(self, event):
            self.setCursorPos()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(685, 500)
        MainWindow.setMinimumSize(QtCore.QSize(685, 500))
        MainWindow.setMaximumSize(QtCore.QSize(685, 500))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/resources/image/icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("#centralwidget {\n"
                                 "    background-image: url(:/resources/image/background.png);\n"
                                 "}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(380, 305, 130, 45))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton {\n"
                                      "background: autoFill;\n"
                                      "background-color: rgb(0, 108, 125);\n"
                                      "color: rgb(255, 255, 255);\n"
                                      "border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 18px;\n"
                                      "}\n"
                                      "QPushButton::pressed {\n"
                                      "    background-color: rgb(97, 164, 173);\n"
                                      "}")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(520, 305, 150, 45))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background: autoFill;\n"
                                        "background-color: rgb(1, 74, 88);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 18px;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(220, 305, 150, 45))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("QPushButton {\n"
                                        "background: autoFill;\n"
                                        "background-color: rgb(1, 74, 88);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 18px;\n"
                                        "}\n"
                                        "QPushButton::pressed {\n"
                                        "    background-color: rgb(97, 164, 173);\n"
                                        "}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(570, 159, 88, 33))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("QPushButton {\n"
                                        "background: autoFill;\n"
                                        "background-color: rgb(1, 74, 88);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 9px;\n"
                                        "}\n"
                                        "QPushButton::pressed {\n"
                                        "    background-color: rgb(97, 164, 173);\n"
                                        "}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(199, 423, 444, 15))
        self.progressBar.setStyleSheet("QProgressBar {\n"
                                       "    border-style: solid;\n"
                                       "    border-width: 1px;\n"
                                       "    border-radius: 23px;\n"
                                       "    background:transparent;\n"
                                       "    background-color: rgb(203, 228, 233);\n"
                                       "    text-align: center;\n"
                                       "}\n"
                                       "\n"
                                       "QProgressBar::chunk  {\n"
                                       "    border-radius: 10px;\n"
                                       "    background-color: rgb(0, 105, 109);\n"
                                       "}\n"
                                       "")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")

        self.lineEdit = self.MyLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(355, 111, 300, 30))
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setStyleSheet("QLineEdit {    \n"
                                    "    border-style: outset;\n"
                                    "    border-width: 2px;\n"
                                    "    border-radius: 8px;\n"
                                    "    border-color: rgb(0, 0, 0);\n"
                                    "    background: transparent;\n"
                                    "    font-size: 20px;\n"
                                    "}")
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(235, 113, 101, 23))
        self.label.setStyleSheet("background: transparent;\n"
                                 "font: 75 12pt \"Arial\";\n"
                                 "color: rgb(0, 59, 70);")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(235, 208, 101, 23))
        self.label_2.setStyleSheet("background: transparent;\n"
                                   "font: 75 12pt \"Arial\";\n"
                                   "color: rgb(0, 59, 70);")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(422, 208, 131, 24))
        self.label_3.setStyleSheet("QLabel {\n"
                                   "background: transparent;\n"
                                   "font: 75 12pt \"Arial\";\n"
                                   "color: rgb(0, 59, 70);\n"
                                   "}\n"
                                   "QToolTip {\n"
                                   "background-color: rgb(248,253,253);\n"
                                   "color: #003b46;\n"
                                   "}")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(235, 252, 111, 23))
        self.label_4.setStyleSheet("font: 75 12pt \"Arial\";\n"
                                   "color: rgb(0, 61, 74);\n"
                                   "background: transparent;")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(275, 20, 381, 41))
        self.label_5.setStyleSheet("font: 75 26pt \"Arial\";\n"
                                   "color: rgb(235, 242, 244);\n"
                                   "background:transparent;")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(235, 163, 101, 23))
        self.label_6.setStyleSheet("background: transparent;\n"
                                   "font: 75 12pt \"Arial\";\n"
                                   "color: rgb(0, 59, 70);")
        self.label_6.setObjectName("label_6")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setEnabled(False)
        self.lineEdit_2.setGeometry(QtCore.QRect(355, 250, 300, 30))
        self.lineEdit_2.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 8px;\n"
                                      "border-color: rgb(0, 0, 0);\n"
                                      "background: transparent;\n"
                                      "font-size: 20px;")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(355, 160, 211, 30))
        self.lineEdit_3.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 8px;\n"
                                      "border-color: rgb(0, 0, 0);\n"
                                      "background: transparent;\n"
                                      "font-size: 20px;")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(355, 195, 57, 50))
        self.checkBox.setStyleSheet("QCheckBox::indicator {\n"
                                    "    width: 50px;\n"
                                    "    height: 50px;\n"
                                    "}\n"
                                    "\n"
                                    "QCheckBox::indicator::checked {\n"
                                    "    image: url(:/resources/image/switch-on.png);\n"
                                    "}\n"
                                    "\n"
                                    "QCheckBox::indicator::unchecked {\n"
                                    "    image: url(:/resources/image/switch-off.png);\n"
                                    "}")
        self.checkBox.setText("")
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setGeometry(QtCore.QRect(610, 430, 57, 51))
        self.checkBox_2.setStyleSheet("QCheckBox::indicator {\n"
                                      "    width: 50px;\n"
                                      "    height: 50px;\n"
                                      "}\n"
                                      "\n"
                                      "QCheckBox::indicator::checked {\n"
                                      "    \n"
                                      "    image: url(:/resources/image/robot2.png);\n"
                                      "}\n"
                                      "\n"
                                      "QCheckBox::indicator::unchecked {\n"
                                      "    image: url(:/resources/image/robot.png);\n"
                                      "}")
        self.checkBox_2.setText("")
        self.checkBox_2.setObjectName("checkBox_2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.setConfig()
        self.checkActions()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        MainWindow.setTabOrder(self.pushButton, self.pushButton_3)
        MainWindow.setTabOrder(self.pushButton_3, self.pushButton_2)
        MainWindow.setTabOrder(self.pushButton_2, self.lineEdit)
        MainWindow.setTabOrder(self.lineEdit, self.lineEdit_3)
        MainWindow.setTabOrder(self.lineEdit_3, self.pushButton_4)
        MainWindow.setTabOrder(self.pushButton_4, self.checkBox)
        MainWindow.setTabOrder(self.checkBox, self.lineEdit_2)
        MainWindow.setTabOrder(self.lineEdit_2, self.checkBox_2)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "GH"))
        self.pushButton.setText(_translate("MainWindow", "Пуск"))
        self.pushButton_2.setText(_translate("MainWindow", "Сохранить как..."))
        self.pushButton_3.setText(_translate("MainWindow", "Конфигурация"))
        self.pushButton_4.setText(_translate("MainWindow", "Сохранить"))
        self.label.setText(_translate("MainWindow", "Код игрока"))
        self.label_2.setText(_translate("MainWindow", "Один игрок"))
        self.label_3.setToolTip(_translate("MainWindow",
                                           "<span style=\'font-size: 13px;\'>Переключатель в режиме \"Вся гильдия\" предоставляет информацию о всех участниках гильдии, в которой состоит игрок.</span>"))
        self.label_3.setText(_translate("MainWindow",
                                        "<html><head/><body><p>Вся гильдия <span style=\" vertical-align:super;\">ⓘ</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "Директория"))
        self.label_5.setText(_translate("MainWindow", "Игровой ассистент"))
        self.label_6.setText(_translate("MainWindow", "Адрес API"))
        self.lineEdit_2.setText(os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop').replace('\\', '/'))
        self.lineEdit_3.setPlaceholderText(_translate("MainWindow", "http://"))

    def setConfig(self):
        a = db.getDb("db_main.json")
        req = a.getByQuery({"name": "api"})
        url = ""
        if req:
            url = req[0]["value"]

        self.lineEdit_3.setText(url)

        req = a.getByQuery({"type": "code"})
        if req:
            code = req[0]["value"]
            self.lineEdit.setInputMask('999-999-999')
            self.lineEdit.setText(code)

    def checkActions(self):
        self.pushButton.clicked.connect(self.saveCodetoConfig)
        self.pushButton_2.clicked.connect(self.changeDirectory)
        self.pushButton_3.clicked.connect(self.updateConfig)
        self.pushButton_4.clicked.connect(self.saveUrlAPItoConfig)

    def changeDirectory(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.DirectoryOnly)
        fname = dialog.getExistingDirectory(self, 'Выбор директории для сохранения',
                                            os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop'))
        if fname:
            self.lineEdit_2.setText(fname)

    def saveUrlAPItoConfig(self):
        a = db.getDb("db_main.json")
        url = self.lineEdit_3.text()
        if not url == "" and url[-1] != '/':
            url += '/'

        req = a.getByQuery({"name": "api"})
        if req:
            a.updateByQuery({"name": "api"}, {"value": url})
        else:
            data = a.getAll()
            data.append({"type": "url", "name": "api", "value": url, "id": 0})
            req2 = a.getByQuery({"name": "player"})
            if not req2:
                data.append({"type": "url", "name": "player", "value": "player/", "id": 0})
            req2 = a.getByQuery({"name": "guild"})
            if not req2:
                data.append({"type": "url", "name": "guild", "value": "guild-profile/", "id": 0})
            req2 = a.getByQuery({"name": "characters"})
            if not req2:
                data.append({"type": "url", "name": "characters", "value": "characters/", "id": 0})
            a.deleteAll()
            a.addMany(data)

    def saveCodetoConfig(self):
        a = db.getDb("db_main.json")
        code = self.lineEdit.text()

        if code != "":
            req = a.getByQuery({"type": "code"})
            if req:
                a.updateByQuery({"type": "code"}, {"value": code})
            else:
                data = a.getAll()
                a.deleteAll()
                data.append({"type": "code", "name": "code", "value": code, "id": 0})
                a.addMany(data)

    @staticmethod
    def updateConfig():
        dialog = Ui_Dialog()
        dialog.setupUi(dialog)
        dialog.exec_()

    def startProgressBar(self):
        self.thread1 = MyThread(sleep=1.5)
        self.thread1.change_value.connect(self.changeValueOfProgressBar)
        self.thread1.start()
        self.thread2 = MyThread(sleep=0.3)
        self.thread2.change_value.connect(self.changeValueOfRobot)
        self.thread2.start()
        self.pushButton.setEnabled(False)
        self.pushButton_2.setEnabled(False)
        self.lineEdit.setEnabled(False)
        self.checkBox.setEnabled(False)

    def changeValueOfProgressBar(self, val):
        self.progressBar.setValue(val)

    def changeValueOfRobot(self):
        self.checkBox_2.setChecked(not self.checkBox_2.isChecked())

    def show_popup(self):
        idtext = self.lineEdit.text() or "000-000-000"
        msg = PopupException("Не удалось найти игрока с кодом ", id=idtext)
        msg.setupUi(msg)
        msg.exec_()

    def show_popup_ex(self):
        msg = PopupException("Произошла непредвиденная ошибка")
        msg.setupUi(msg)
        msg.exec_()

    def show_popup_success(self):
        msg = PopupException("Статистика была успешно получена", False)
        msg.setupUi(msg)
        msg.exec_()


if __name__ == "__main__":
    import sys
    import ctypes

    myappid = 'mycompany.myproduct.subproduct.version'  # arbitrary string
    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
